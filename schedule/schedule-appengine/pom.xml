<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.jasify</groupId>
        <artifactId>jasify</artifactId>
        <version>1.0.1</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>

    <groupId>com.jasify.schedule</groupId>
    <artifactId>schedule-appengine</artifactId>
    <description>The Jasify Schedule frontend</description>

    <properties>
        <appengine.app.version>1</appengine.app.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- Compile/runtime dependencies -->

        <!-- BEGIN: appengine stuff -->
        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-1.0-sdk</artifactId>
            <version>${jasify.appengine.sdk.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jstl</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>
        <!-- END: appengine stuff -->

        <!-- BEGIN: logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.7</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>1.7.7</version>
        </dependency>
        <!-- END: logging -->

        <!-- BEGIN: frameworks we can't live without :-) -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>18.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.3.2</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
        </dependency>
        <!-- END: frameworks we can't live without :-) -->

        <!-- BEGIN: google appengine frameworks, originally for oauth, but probably much more -->
        <dependency>
            <groupId>com.google.api-client</groupId>
            <artifactId>google-api-client-gson</artifactId>
            <version>1.19.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.oauth-client</groupId>
            <artifactId>google-oauth-client</artifactId>
            <version>1.19.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.oauth-client</groupId>
            <artifactId>google-oauth-client-servlet</artifactId>
            <version>1.19.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.api-client</groupId>
            <artifactId>google-api-client-jackson2</artifactId>
            <version>1.19.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.api-client</groupId>
            <artifactId>google-api-client-java6</artifactId>
            <version>1.19.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.oauth-client</groupId>
            <artifactId>google-oauth-client-appengine</artifactId>
            <version>1.19.0</version>
        </dependency>
        <!-- END: google appengine frameworks, originally for oauth, but probably much more -->

        <!-- BEGIN: Slim3 used for Datastore (see: https://github.com/krico/jas/issues/15) -->
        <dependency>
            <groupId>org.slim3</groupId>
            <artifactId>slim3</artifactId>
            <version>1.0.16</version>
        </dependency>
        <dependency>
            <groupId>org.slim3</groupId>
            <artifactId>slim3-gen</artifactId>
            <version>1.0.16</version>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.ant</groupId>
                    <artifactId>ant</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- END: Slim3 used for Datastore (see: https://github.com/krico/jas/issues/15) -->

        <!-- Test Dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-testing</artifactId>
            <version>${jasify.appengine.sdk.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-stubs</artifactId>
            <version>${jasify.appengine.sdk.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>httpunit</groupId>
            <artifactId>httpunit</artifactId>
            <version>1.7</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <version>3.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <!-- for hot reload of the web application-->
        <outputDirectory>${project.build.directory}/${project.build.finalName}/WEB-INF/classes</outputDirectory>
        <plugins>
            <!--
            NOTE: To generate the Meta classes we use apt to run slim3-gen.
            To get this to be generated run
            mvn apt:process
            I don't want to add this to the build cycle as we shouldn't be changing our model too much.
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>apt-maven-plugin</artifactId>
                <version>1.0-alpha-5</version>
                <configuration>
                    <factory>org.slim3.gen.processor.ModelProcessorFactory</factory>
                    <sourceOutputDirectory>${project.build.sourceDirectory}</sourceOutputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archiveClasses>true</archiveClasses>
                    <webResources>
                        <!-- in order to interpolate version from pom into appengine-web.xml -->
                        <resource>
                            <directory>${basedir}/src/main/webapp/WEB-INF</directory>
                            <filtering>true</filtering>
                            <targetPath>WEB-INF</targetPath>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.google.appengine</groupId>
                <artifactId>appengine-maven-plugin</artifactId>
                <version>${jasify.appengine.sdk.version}</version>
                <configuration>
                    <enableJarClasses>false</enableJarClasses>
                    <!-- Comment in the below snippet to bind to all IPs instead of just localhost -->
                    <address>0.0.0.0</address>
                    <port>8080</port>
                    <!-- Comment in the below snippet to enable local debugging with a remove debugger
                         like those included with Eclipse or IntelliJ -->
                    <!-- jvmFlags>
                      <jvmFlag>-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n</jvmFlag>
                    </jvmFlags -->
                </configuration>
            </plugin>

            <!-- configure surefire for java testing -->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.17</version>
                <configuration>
                    <forkMode>always</forkMode>
                    <systemPropertyVariables>
                        <java.util.logging.config.class>
                            com.jasify.schedule.appengine.LoggingConfiguration
                        </java.util.logging.config.class>
                    </systemPropertyVariables>
                </configuration>
            </plugin>


            <!-- WebDriver for jasmine (below) -->
            <plugin>
                <groupId>com.github.klieber</groupId>
                <artifactId>phantomjs-maven-plugin</artifactId>
                <version>0.4</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>install</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <version>1.9.7</version>
                </configuration>
            </plugin>


            <!-- Jasmine for javascript testing -->
            <plugin>
                <groupId>com.github.searls</groupId>
                <artifactId>jasmine-maven-plugin</artifactId>
                <version>1.3.1.5</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <jsSrcDir>src/main/webapp/js</jsSrcDir>
                    <jsTestSrcDir>src/test/webapp/js</jsTestSrcDir>
                    <preloadSources>
                        <source>src/main/webapp/bc/angular/angular.js</source>
                        <source>src/main/webapp/bc/angular-mocks/angular-mocks.js</source>
                        <source>src/main/webapp/bc/angular-route/angular-route.min.js</source>
                        <source>src/main/webapp/bc/angular-resource/angular-resource.min.js</source>
                        <source>src/main/webapp/js/application.js</source>
                        <source>src/main/webapp/js/controllers.js</source>
                    </preloadSources>
                    <webDriverClassName>org.openqa.selenium.phantomjs.PhantomJSDriver</webDriverClassName>
                    <webDriverCapabilities>
                        <capability>
                            <name>phantomjs.binary.path</name>
                            <!-- BUG?  -->
                            <!--<value>${phantomjs.binary}</value>-->
                            <value>target/phantomjs-maven-plugin/phantomjs-1.9.7-macosx/bin/phantomjs</value>
                        </capability>
                    </webDriverCapabilities>
                    <haltOnFailure>true</haltOnFailure>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
